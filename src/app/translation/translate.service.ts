import {HttpClient} from '@angular/common/http';
import {Injectable} from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class TranslateService {
  data: any = {};
  autoGeneratedData: any = {};

  constructor(private http: HttpClient) {}

  public getTranslationFor(key: string) {
    if (this.data[key]) {
      return this.data[key];
    } else if (this.autoGeneratedData[key]) {
      return this.autoGeneratedData[key];
    } else {
      return key;
    }
  }

  use(lang: string): Promise<{}> {
    if (lang === 'DEFAULT') {
      if (localStorage.getItem('language') == null) {
        lang = 'de';
        console.log('No language cookie found! Using de as default');
      } else {
        lang = localStorage.getItem('language');
        console.log('Language cookie found! Using ' + lang);
      }
    } else {
      console.log('Language changed to ' + lang);
    }

    localStorage.setItem('language', lang);

    return new Promise<{}>((resolve) => {
      const langPath = `assets/i18n/${lang || 'de'}.json`;

      // noinspection JSUnusedLocalSymbols
      this.http.get<{}>(langPath).subscribe(
        (translation) => {
          this.data = Object.assign({}, translation || {});
          resolve(this.data);
        },
        (error) => {
          this.data = {};
          resolve(this.data);
        }
      );

      const autoLangPath = `assets/i18n/${lang || 'en'}_auto.json`;
      // noinspection JSUnusedLocalSymbols
      this.http.get<{}>(autoLangPath).subscribe(
        (translation) => {
          this.autoGeneratedData = Object.assign({}, translation || {});
          resolve(this.autoGeneratedData);
        },
        (error) => {
          this.autoGeneratedData = {};
          resolve(this.autoGeneratedData);
        }
      );
    });
  }
}
